import pygame
from pygame.draw import *   #Это позволит вместо pygame.draw.rect(...) писать просто rect(...)

pygame.init()   # Инициализация библиотеки

FPS = 30 # Здесь 30 - это максимальный FPS, быстрее которого программа работать не будет. 

screen = pygame.display.set_mode((800, 500))  # создание окна
# небо
rect(screen, (254, 214, 163), (0, 0, 800, 530)) 
rect(screen, (254, 214, 197), (0, 110, 800, 230))   # объект(экран, цвет (RGB), прозрачность, координаты, width (положительное значение - толщина линии. Если 0 (значение по умолчанию), фигура будет полностью закрашеной))
# Солнце
circle(screen, (252, 239, 27), (360, 90), 35)

# части дальней скалы
polygon(screen, (252, 153, 45), [(165, 108), (196, 119), (205, 140), (307, 204), (360, 195), (387, 209), (165, 230)])
polygon(screen, (252, 153, 45), [(387, 209), (429, 107), (463, 182), (480, 161), (480, 200)])

# сглаженные части дальней скалы по параболе
D = []
for i in range(480, 585, 1):
    D.append((i, (-25 / 3481) * (i - 480) ** 2 + 161))
D.append((600, 189))
D.append((480, 200))
polygon(screen, (252, 153, 45), D)

F = []
for i in range(0, 165, 1):
    F.append((i, (-109 / 21904) * (i - 17) ** 2 + 217))
F.append((165, 230))
F.append((0, 245))
polygon(screen, (252, 153, 45), F)

G = []
for i in range(567, 596, 1):
    G.append((i, (178 / 1495) * i ** 2 + (-208246 / 1495) * i + (938769/23)))
    
polygon(screen, (252, 153, 45), G)    

# дальняя скала
polygon(screen, (252, 153, 45), [(580, 88), (595, 87), (634, 134), (666, 127), (718, 155), (750, 140), (800, 170), (600, 189)])

# части передней скалы
polygon(screen, (173, 65, 49), [(800, 190), (800, 340), (655, 344), (655, 284), (688, 240), (720, 263), (740, 235), (770, 240)])
polygon(screen, (173, 65, 49), [(459, 284), (459, 350), (140, 360), (140, 340), (175, 282), (231, 311), (260, 240), (325, 255), (385, 300)])
polygon(screen, (173, 65, 49), [(0, 250), (25, 264), (25, 360), (0, 360)])

# сглаженные части передней скалы
A = []
for i in range(25, 155, 1):
    A.append((i, (18 / 841) * (i - 73) ** 2 + 214))
A.append((140, 360))
A.append((25, 360))
polygon(screen, (173, 65, 49), A)

B = []
for i in range(450, 565, 1):
    B.append((i, (1 / 125) * (i - 550) ** 2 + 220))
B.append((565, 360))
B.append((450, 360))
polygon(screen, (173, 65, 49), B)

polygon(screen, (178, 125, 135), [(0, 358), (800, 340), (800, 530), (0, 530)])

C = []
for i in range(565, 655, 1):
    C.append((i, (-59 / 7921) * (i - 655) ** 2 + 285))
C.append((655, 360))
C.append((565, 360))
polygon(screen, (173, 65, 49), C)

# передний план (воздух)
polygon(screen, (178, 125, 135), [(0, 358), (800, 340), (800, 530), (0, 530)])

# передний план (тёмная гора)
polygon(screen, (64, 22, 40), [(0, 500), (0, 150), (75, 250), (95, 265), (95, 495), (320, 480), (360, 360), (400, 320), (420, 360), (420, 495), (660, 495), (660, 350), (685, 280), (720, 310), (760, 320), (800, 230), (800, 500)])

# сглаженные части тёмной скалы
H = [(95, 500)]
for i in range(95, 321, 1):
    H.append((i, (-34/7875) * i ** 2 + (4327/1575) * i + (1504/35)))
H.append((320, 500))    
polygon(screen, (64, 22, 40), H) 

J = [(420, 500)]
for i in range(420, 601, 1):
    J.append((i, (-4/405) * i ** 2 + (541/54) * i + (-18950/9)))
J.append((600, 500))    
polygon(screen, (64, 22, 40), J) 

K = [(600, 500)]
for i in range(600, 661, 1):
    K.append((i, (1/30) * i ** 2 + (-42) * i + (13550)))
K.append((660, 500))    
polygon(screen, (64, 22, 40), K) 



# Функция рисует птичек на экране
def print_bird(Xc, Yc, scale):      
    dY = 50 * scale
    dX = 65 * scale
    r = 15 * scale
    pygame.draw.polygon(screen, (63, 39, 44), [[(Xc - dX - r / 2 ** 0.5) + 3, (Yc - dY + r / 2 ** 0.5)], [Xc, Yc], [(Xc + dX), (Yc - dY)], [(Xc + dX / 2), (Yc - dY * 2 / 2)], [Xc, (Yc - dY / 2)]])
    

print_bird(200, 340, 1.1)
print_bird(300, 300, 0.9)
print_bird(210, 270, 0.8)
print_bird(400, 260, 0.7)
print_bird(450, 220, 0.5)
print_bird(550, 150, 0.3)
print_bird(570, 170, 0.3)
print_bird(630, 180, 0.2)
print_bird(640, 200, 0.2)   
print_bird(670, 190, 0.2)    

pygame.display.update() # после чего, чтобы они отобразились на экране, экран нужно обновить:
clock = pygame.time.Clock()
finished = False

while not finished:   # основной цикл, в котором будут отслеживаться происходящие события. Пока единственное событие, которое нас интересует - выход из программы.
    clock.tick(FPS)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            finished = True

pygame.quit()